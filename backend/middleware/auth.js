const crypto = require('crypto');
const User = require('../models/User');

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const authenticateTelegram = async (req, res, next) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        const telegramData = req.headers['x-telegram-data'] || req.body.telegramData;
        const telegramHash = req.headers['x-telegram-hash'] || req.body.telegramHash;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
        if (!telegramData || !telegramHash) {
            console.log('üîß –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
            let user = await User.findOne({ telegramId: 999999999 }); // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
            
            if (!user) {
                user = new User({
                    telegramId: 999999999,
                    username: 'web_user',
                    firstName: 'Web',
                    lastName: 'User'
                });
                await user.save();
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
            }
            
            req.user = user;
            req.telegramUser = {
                id: 999999999,
                username: 'web_user',
                first_name: 'Web',
                last_name: 'User'
            };
            
            return next();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const botToken = process.env.TELEGRAM_BOT_TOKEN || 'your_bot_token_here';
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
        console.log('üîç telegramData:', telegramData);
        console.log('üîç telegramHash:', telegramHash);
        
        // TODO: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        /*
        const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
        const hash = crypto.createHmac('sha256', secretKey).update(telegramData).digest('hex');
        
        if (hash !== telegramHash) {
            console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram:', { received: telegramHash, expected: hash });
            if (process.env.NODE_ENV === 'production') {
                return res.status(401).json({ 
                    error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram',
                    code: 'INVALID_SIGNATURE'
                });
            }
        }
        */

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userData;
        let telegramUser;
        
        try {
            userData = JSON.parse(telegramData);
            telegramUser = userData.user;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ telegramData:', error);
            return res.status(401).json({ 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö Telegram',
                code: 'INVALID_DATA_FORMAT'
            });
        }

        if (!telegramUser || !telegramUser.id) {
            return res.status(401).json({ 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram',
                code: 'INVALID_USER_DATA'
            });
        }

        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await User.findOne({ telegramId: telegramUser.id });
        
        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = new User({
                telegramId: telegramUser.id,
                username: telegramUser.username || null,
                firstName: telegramUser.first_name || null,
                lastName: telegramUser.last_name || null,
                photoUrl: telegramUser.photo_url || null
            });
            await user.save();
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.telegramId);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = telegramUser.username || user.username;
            user.firstName = telegramUser.first_name || user.firstName;
            user.lastName = telegramUser.last_name || user.lastName;
            user.photoUrl = telegramUser.photo_url || user.photoUrl;
            await user.updateActivity();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        req.user = user;
        req.telegramUser = telegramUser;
        
        next();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            code: 'AUTH_ERROR'
        });
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
const requireWallet = async (req, res, next) => {
    if (!req.user) {
        return res.status(401).json({ 
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
            code: 'USER_NOT_AUTHENTICATED'
        });
    }

    if (!req.user.isWalletConnected || !req.user.walletAddress) {
        return res.status(400).json({ 
            error: '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
            code: 'WALLET_NOT_CONNECTED'
        });
    }

    next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
const requireBalance = (minAmount) => {
    return async (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({ 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                code: 'USER_NOT_AUTHENTICATED'
            });
        }

        if (req.user.balance < minAmount) {
            return res.status(400).json({ 
                error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${minAmount} TON, –¥–æ—Å—Ç—É–ø–Ω–æ: ${req.user.balance} TON`,
                code: 'INSUFFICIENT_BALANCE',
                required: minAmount,
                available: req.user.balance
            });
        }

        next();
    };
};

module.exports = {
    authenticateTelegram,
    requireWallet,
    requireBalance
}; 