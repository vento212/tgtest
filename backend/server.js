const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const axios = require('axios');
const bodyParser = require('body-parser');
const Order = require('./models/Order.js');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: './config.env' });

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' })); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ JSON

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ middleware:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://localhost:27017/ton-payment-app', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB'))
.catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/orders', async (req, res) => {
    try {
        const { amount } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!amount || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞' });
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if (amount > 1000) {
            return res.status(400).json({ error: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const timestamp = Date.now();
        const randomId = Math.random().toString(36).substring(2, 8);
        const comment = `order_${timestamp}_${randomId}`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ nanoTON
        const amountNano = Math.floor(amount * 1000000000);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        const walletAddress = process.env.WALLET_ADDRESS || 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrjKvVmh2v9vXeJw8G';
        if (!walletAddress || walletAddress.length < 10) {
            return res.status(500).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ MongoDB
        const order = new Order({
            amount: amount,
            amountNano: amountNano,
            comment: comment,
            status: 'pending',
            walletAddress: walletAddress
        });
        
        await order.save();
        
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', order);
        res.json(order);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.get('/api/orders/:comment/status', async (req, res) => {
    try {
        const { comment } = req.params;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if (!comment || typeof comment !== 'string' || comment.length < 10) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ MongoDB
        const order = await Order.findOne({ comment: comment });
        
        if (!order) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (order.status === 'paid') {
            return res.json({ status: 'paid' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ TON Center API
        const walletAddress = order.walletAddress;
        const expectedAmount = order.amountNano;
        const expectedComment = order.comment;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        if (!walletAddress || !expectedAmount || !expectedComment) {
            return res.status(500).json({ error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞' });
        }
        
        try {
            const apiKey = process.env.TONCENTER_API_KEY;
            if (!apiKey || apiKey === 'your_toncenter_api_key_here') {
                console.warn('‚ö†Ô∏è API –∫–ª—é—á TON Center –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                return res.json({ status: 'pending' });
            }
            
            const response = await axios.get(
                `${process.env.TONCENTER_BASE_URL || 'https://toncenter.com/api/v2'}/getTransactions`,
                {
                    params: {
                        address: walletAddress,
                        limit: 10
                    },
                    headers: {
                        'X-API-Key': apiKey
                    },
                    timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                }
            );
            
            if (!response.data || !response.data.result) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
            }
            
            const transactions = response.data.result;
            
            // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω—É–∂–Ω–æ–π —Å—É–º–º–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            const payment = transactions.find(tx => 
                tx.in_msg &&
                tx.in_msg.value === expectedAmount.toString() &&
                tx.in_msg.message && 
                tx.in_msg.message.includes(expectedComment)
            );
            
            if (payment) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ MongoDB
                order.status = 'paid';
                order.paidAt = new Date();
                await order.save();
                
                console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', comment);
                res.json({ status: 'paid' });
            } else {
                res.json({ status: 'pending' });
            }
            
        } catch (apiError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API TON Center:', apiError.message);
            res.json({ status: 'pending' });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/orders', async (req, res) => {
    try {
        const allOrders = await Order.find().sort({ createdAt: -1 });
        res.json(allOrders);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)); 