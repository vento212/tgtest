const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const axios = require('axios');
const bodyParser = require('body-parser');
const Order = require('./models/Order.js');
const User = require('./models/User.js');
const { authenticateTelegram, requireWallet, requireBalance } = require('./middleware/auth.js');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: './config.env' });

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' })); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ JSON

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
app.use((req, res, next) => {
    if (mongoose.connection.readyState !== 1) {
        console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        return res.status(503).json({ 
            error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            details: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
        });
    }
    next();
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ middleware:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const getMongoUri = () => {
    if (process.env.NODE_ENV === 'production') {
        return process.env.MONGODB_ATLAS_URI || process.env.MONGODB_URI;
    }
    return process.env.MONGODB_URI || 'mongodb://localhost:27017/ton-payment-app';
};

const mongoUri = getMongoUri();
console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: ${process.env.NODE_ENV === 'production' ? 'Atlas (Production)' : 'Local'}`);

mongoose.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB'))
.catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω MongoDB Atlas');
});

// ===== API ENDPOINTS –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/profile', authenticateTelegram, async (req, res) => {
    try {
        const user = req.user;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        const orderStats = await Order.aggregate([
            { $match: { userId: user._id } },
            { 
                $group: {
                    _id: null,
                    totalOrders: { $sum: 1 },
                    successfulOrders: { $sum: { $cond: [{ $eq: ['$status', 'paid'] }, 1, 0] } },
                    totalSpent: { $sum: { $cond: [{ $eq: ['$status', 'paid'] }, '$amount', 0] } }
                }
            }
        ]);

        const stats = orderStats[0] || { totalOrders: 0, successfulOrders: 0, totalSpent: 0 };

        res.json({
            user: {
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                photoUrl: user.photoUrl,
                walletAddress: user.walletAddress,
                isWalletConnected: user.isWalletConnected,
                balance: user.balance,
                lastActivity: user.lastActivity,
                createdAt: user.createdAt
            },
            stats: {
                totalOrders: stats.totalOrders,
                successfulOrders: stats.successfulOrders,
                totalSpent: stats.totalSpent
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
app.post('/api/user/connect-wallet', authenticateTelegram, async (req, res) => {
    try {
        const { walletAddress } = req.body;
        const user = req.user;

        if (!walletAddress || typeof walletAddress !== 'string') {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞' });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ TON –∫–æ—à–µ–ª—å–∫–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if (!walletAddress.startsWith('EQ') && !walletAddress.startsWith('UQ')) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ TON –∫–æ—à–µ–ª—å–∫–∞' });
        }

        await user.connectWallet(walletAddress);
        
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.telegramId);
        res.json({ 
            success: true, 
            message: '–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω',
            walletAddress: user.walletAddress
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
app.post('/api/user/disconnect-wallet', authenticateTelegram, async (req, res) => {
    try {
        const user = req.user;
        await user.disconnectWallet();
        
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.telegramId);
        res.json({ 
            success: true, 
            message: '–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
app.post('/api/user/deposit', authenticateTelegram, async (req, res) => {
    try {
        const { amount } = req.body;
        const user = req.user;

        if (!amount || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' });
        }

        if (amount > 1000) {
            return res.status(400).json({ error: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
        const timestamp = Date.now();
        const randomId = Math.random().toString(36).substring(2, 8);
        const comment = `deposit_${user.telegramId}_${timestamp}_${randomId}`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ nanoTON
        const amountNano = Math.floor(amount * 1000000000);
        
        // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        const merchantWalletAddress = process.env.WALLET_ADDRESS || 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrjKvVmh2v9vXeJw8G';
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç
        const depositOrder = new Order({
            userId: user._id,
            telegramId: user.telegramId,
            itemId: 0, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
            itemName: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            amount: amount,
            amountNano: amountNano,
            comment: comment,
            status: 'pending',
            merchantWalletAddress: merchantWalletAddress,
            paymentMethod: 'external_wallet'
        });
        
        await depositOrder.save();
        
        console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', depositOrder._id);
        
        res.json({
            success: true,
            order: depositOrder,
            deeplink: `ton://transfer/${merchantWalletAddress}?amount=${amountNano}&text=${encodeURIComponent(comment)}`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
app.post('/api/user/withdraw', authenticateTelegram, requireWallet, requireBalance(0.1), async (req, res) => {
    try {
        const { amount, toAddress } = req.body;
        const user = req.user;

        if (!amount || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞' });
        }

        if (!toAddress || typeof toAddress !== 'string') {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è' });
        }

        if (amount > user.balance) {
            return res.status(400).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                available: user.balance,
                requested: amount
            });
        }

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥
        const minWithdrawal = 0.1;
        if (amount < minWithdrawal) {
            return res.status(400).json({ 
                error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${minWithdrawal} TON`
            });
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.deductBalance(amount);
        
        console.log('‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.telegramId, '—Å—É–º–º–∞:', amount);
        
        res.json({
            success: true,
            message: '–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã',
            amount: amount,
            newBalance: user.balance
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ===== API ENDPOINTS –î–õ–Ø –ó–ê–ö–ê–ó–û–í =====

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/orders', authenticateTelegram, async (req, res) => {
    try {
        const { itemId, itemName, itemTokenId, amount, paymentMethod = 'external_wallet' } = req.body;
        const user = req.user;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!itemId || !itemName || !amount || typeof amount !== 'number' || amount <= 0) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞' });
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if (amount > 1000) {
            return res.status(400).json({ error: '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å
        if (paymentMethod === 'wallet_balance') {
            if (!user.isWalletConnected) {
                return res.status(400).json({ error: '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–º' });
            }
            if (user.balance < amount) {
                return res.status(400).json({ 
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
                    available: user.balance,
                    required: amount
                });
            }
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const timestamp = Date.now();
        const randomId = Math.random().toString(36).substring(2, 8);
        const comment = `order_${user.telegramId}_${itemId}_${timestamp}_${randomId}`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ nanoTON
        const amountNano = Math.floor(amount * 1000000000);
        
        // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        const merchantWalletAddress = process.env.WALLET_ADDRESS || 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrjKvVmh2v9vXeJw8G';
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ MongoDB
        const order = new Order({
            userId: user._id,
            telegramId: user.telegramId,
            itemId: itemId,
            itemName: itemName,
            itemTokenId: itemTokenId,
            amount: amount,
            amountNano: amountNano,
            comment: comment,
            status: 'pending',
            userWalletAddress: user.walletAddress,
            merchantWalletAddress: merchantWalletAddress,
            paymentMethod: paymentMethod
        });
        
        await order.save();
        
        // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å, —Å—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        if (paymentMethod === 'wallet_balance') {
            await user.deductBalance(amount);
            await order.markAsPaid();
            user.totalOrders += 1;
            user.successfulOrders += 1;
            await user.save();
        }
        
        console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', order._id);
        
        const response = {
            order: order,
            deeplink: paymentMethod === 'external_wallet' 
                ? `ton://transfer/${merchantWalletAddress}?amount=${amountNano}&text=${encodeURIComponent(comment)}`
                : null
        };
        
        res.json(response);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.get('/api/orders/:comment/status', async (req, res) => {
    try {
        const { comment } = req.params;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if (!comment || typeof comment !== 'string' || comment.length < 10) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ MongoDB
        const order = await Order.findOne({ comment: comment });
        
        if (!order) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (order.status === 'paid') {
            return res.json({ status: 'paid' });
        }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∏—Å—Ç–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (order.isExpired) {
            await order.markAsExpired();
            return res.json({ status: 'expired' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ TON Center API —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if (order.paymentMethod === 'external_wallet') {
            const walletAddress = order.merchantWalletAddress;
            const expectedAmount = order.amountNano;
            const expectedComment = order.comment;
            
            try {
                const apiKey = process.env.TONCENTER_API_KEY;
                if (!apiKey || apiKey === 'your_toncenter_api_key_here') {
                    console.warn('‚ö†Ô∏è API –∫–ª—é—á TON Center –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                    return res.json({ status: 'pending' });
                }
                
                const response = await axios.get(
                    `${process.env.TONCENTER_BASE_URL || 'https://toncenter.com/api/v2'}/getTransactions`,
                    {
                        params: {
                            address: walletAddress,
                            limit: 10
                        },
                        headers: {
                            'X-API-Key': apiKey
                        },
                        timeout: 10000
                    }
                );
                
                if (!response.data || !response.data.result) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
                }
                
                const transactions = response.data.result;
                
                // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω—É–∂–Ω–æ–π —Å—É–º–º–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                const payment = transactions.find(tx => 
                    tx.in_msg &&
                    tx.in_msg.value === expectedAmount.toString() &&
                    tx.in_msg.message && 
                    tx.in_msg.message.includes(expectedComment)
                );
                
                if (payment) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                    await order.markAsPaid(payment.transaction_id?.hash);
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–ø–æ–∑–∏—Ç, –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (order.itemId === 0) {
                        const user = await User.findById(order.userId);
                        if (user) {
                            await user.addBalance(order.amount);
                            console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.telegramId);
                        }
                    } else {
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
                        const user = await User.findById(order.userId);
                        if (user) {
                            user.totalOrders += 1;
                            user.successfulOrders += 1;
                            await user.save();
                        }
                    }
                    
                    console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', comment);
                    res.json({ status: 'paid' });
                } else {
                    res.json({ status: 'pending' });
                }
                
            } catch (apiError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API TON Center:', apiError.message);
                res.json({ status: 'pending' });
            }
        } else {
            res.json({ status: order.status });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/orders', authenticateTelegram, async (req, res) => {
    try {
        const user = req.user;
        const { status, limit = 20, offset = 0 } = req.query;
        
        const filter = { userId: user._id };
        if (status && ['pending', 'paid', 'expired', 'cancelled'].includes(status)) {
            filter.status = status;
        }
        
        const orders = await Order.find(filter)
            .sort({ createdAt: -1 })
            .limit(parseInt(limit))
            .skip(parseInt(offset));
            
        const total = await Order.countDocuments(filter);
        
        res.json({
            orders: orders,
            total: total,
            hasMore: total > parseInt(offset) + orders.length
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/orders', async (req, res) => {
    try {
        const allOrders = await Order.find().sort({ createdAt: -1 }).populate('userId', 'telegramId username');
        res.json(allOrders);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)); 