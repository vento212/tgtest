const mongoose = require('mongoose');

// –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
const MONGODB_URI = 'mongodb+srv://tonnelque:cdcdcdcd@cluster0.mgg7dgs.mongodb.net/tgmarket?retryWrites=true&w=majority';

async function testConnection() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB Atlas!');
        console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: tgmarket');
        console.log('üåê –ö–ª–∞—Å—Ç–µ—Ä: cluster0.mgg7dgs.mongodb.net');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collections.map(c => c.name));
        
        await mongoose.disconnect();
        console.log('üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        
        if (error.message.includes('Authentication failed')) {
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ password');
        } else if (error.message.includes('ENOTFOUND')) {
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞');
        } else if (error.message.includes('ECONNREFUSED')) {
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Network Access');
        }
    }
}

testConnection(); 