// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const testTelegramData = {
  user: {
    id: 123456789,
    first_name: "Test",
    last_name: "User",
    username: "testuser",
    photo_url: "https://t.me/i/userpic/320/testuser.jpg"
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const testHeaders = {
  'X-Telegram-Data': JSON.stringify(testTelegramData),
  'X-Telegram-Hash': 'test_hash_for_development',
  'Content-Type': 'application/json'
};

async function testImprovedSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã TON Marketplace\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    const healthCheck = await axios.get(`${API_BASE_URL}/api/orders`);
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', healthCheck.data.length);
    console.log('');

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const profile = await axios.get(`${API_BASE_URL}/api/user/profile`, { headers: testHeaders });
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', {
        telegramId: profile.data.user.telegramId,
        username: profile.data.user.username,
        balance: profile.data.user.balance,
        isWalletConnected: profile.data.user.isWalletConnected
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.response?.data?.error || error.message);
    }
    console.log('');

    // –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞...');
    const testWalletAddress = 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrjKvVmh2v9vXeJw8G';
    try {
      const connectResult = await axios.post(`${API_BASE_URL}/api/user/connect-wallet`, {
        walletAddress: testWalletAddress
      }, { headers: testHeaders });
      console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', connectResult.data.message);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error.response?.data?.error || error.message);
    }
    console.log('');

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞...');
    try {
      const depositResult = await axios.post(`${API_BASE_URL}/api/user/deposit`, {
        amount: 1.5
      }, { headers: testHeaders });
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', {
        orderId: depositResult.data.order._id,
        amount: depositResult.data.order.amount,
        comment: depositResult.data.order.comment
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      const testOrder = depositResult.data.order;
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...');
      const statusResult = await axios.get(`${API_BASE_URL}/api/orders/${testOrder.comment}/status`);
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:', statusResult.data.status);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error.response?.data?.error || error.message);
    }
    console.log('');

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
    console.log('6Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É...');
    try {
      const orderResult = await axios.post(`${API_BASE_URL}/api/orders`, {
        itemId: 1,
        itemName: "Cosmic Warrior",
        itemTokenId: "#1234",
        amount: 1.5,
        paymentMethod: 'external_wallet'
      }, { headers: testHeaders });
      console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', {
        orderId: orderResult.data.order._id,
        itemName: orderResult.data.order.itemName,
        amount: orderResult.data.order.amount,
        deeplink: orderResult.data.deeplink ? '–°–æ–∑–¥–∞–Ω' : '–ù–µ—Ç'
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.response?.data?.error || error.message);
    }
    console.log('');

    // –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const ordersResult = await axios.get(`${API_BASE_URL}/api/user/orders`, { headers: testHeaders });
      console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã:', {
        total: ordersResult.data.total,
        ordersCount: ordersResult.data.orders.length
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error.response?.data?.error || error.message);
    }
    console.log('');

    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const allOrders = await axios.get(`${API_BASE_URL}/api/orders`);
      console.log('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ:', allOrders.data.length);
      
      if (allOrders.data.length > 0) {
        const lastOrder = allOrders.data[0];
        console.log('üìã –ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞:', {
          hasUserId: !!lastOrder.userId,
          hasTelegramId: !!lastOrder.telegramId,
          hasItemInfo: !!(lastOrder.itemId && lastOrder.itemName),
          paymentMethod: lastOrder.paymentMethod,
          status: lastOrder.status
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.response?.data?.error || error.message);
    }
    console.log('');

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ API endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.log('\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
    console.log('1. MongoDB –∑–∞–ø—É—â–µ–Ω–∞');
    console.log('2. Backend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    console.log('3. –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testImprovedSystem(); 