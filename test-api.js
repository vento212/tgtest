// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ TON Center
const API_KEY = '5b9f36ace1197dc5d9dba4abdc2198c56bc722e8527f0e2f5266f2d0e3366579';
const WALLET_ADDRESS = 'UQBlcF9j3mvxaLCKeB1APahO9wpqvd91BIn_mUgm9_lDE_4k';

async function testTonCenterAPI() {
  console.log('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á TON Center...');
  console.log(`üìù –ö–ª—é—á: ${API_KEY.substring(0, 10)}...`);
  console.log(`üíº –ö–æ—à–µ–ª–µ–∫: ${WALLET_ADDRESS}`);
  console.log('');

  try {
    // –¢–µ—Å—Ç 1: TON Center - getWalletInfo
    console.log('1Ô∏è‚É£ TON Center - getWalletInfo...');
    const walletResponse = await fetch(`https://toncenter.com/api/v2/getWalletInfo?address=${WALLET_ADDRESS}`, {
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (walletResponse.ok) {
      const walletData = await walletResponse.json();
      console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—É—á–µ–Ω–∞:`);
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${walletData.result.balance / 1000000000} TON`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${walletData.result.state}`);
    } else {
      const errorText = await walletResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${walletResponse.status}: ${errorText}`);
    }
    console.log('');

    // –¢–µ—Å—Ç 2: TON Center - getAddressBalance (–±–µ–∑ API –∫–ª—é—á–∞)
    console.log('2Ô∏è‚É£ TON Center - getAddressBalance (–ø—É–±–ª–∏—á–Ω—ã–π)...');
    const balanceResponse = await fetch(`https://toncenter.com/api/v2/getAddressBalance?address=${WALLET_ADDRESS}`);

    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balanceData.result} –Ω–∞–Ω–æ—Ç–æ–Ω`);
      console.log(`üí∞ –í TON: ${balanceData.result / 1000000000}`);
    } else {
      const errorText = await balanceResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${balanceResponse.status}: ${errorText}`);
    }
    console.log('');

    // –¢–µ—Å—Ç 3: TON API (tonapi.io)
    console.log('3Ô∏è‚É£ TON API (tonapi.io)...');
    const tonApiResponse = await fetch(`https://tonapi.io/v2/accounts/${WALLET_ADDRESS}`);

    if (tonApiResponse.ok) {
      const tonApiData = await tonApiResponse.json();
      console.log(`‚úÖ TON API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:`);
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${tonApiData.balance / 1000000000} TON`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${tonApiData.status}`);
    } else {
      const errorText = await tonApiResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${tonApiResponse.status}: ${errorText}`);
    }
    console.log('');

    // –¢–µ—Å—Ç 4: TON Center - getTransactions
    console.log('4Ô∏è‚É£ TON Center - getTransactions...');
    const transactionsResponse = await fetch(`https://toncenter.com/api/v2/getTransactions?address=${WALLET_ADDRESS}&limit=5`, {
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (transactionsResponse.ok) {
      const transactionsData = await transactionsResponse.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${transactionsData.result.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      if (transactionsData.result.length > 0) {
        const lastTx = transactionsData.result[0];
        console.log(`üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${lastTx.transaction_id.hash}`);
        console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date(lastTx.transaction_id.lt * 1000).toLocaleString()}`);
      }
    } else {
      const errorText = await transactionsResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${transactionsResponse.status}: ${errorText}`);
    }

    console.log('');
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTonCenterAPI(); 