import React, { useState, useEffect } from 'react';
import { useTonConnectUI } from '@tonconnect/ui-react';
import apiClient from './api';
import telegramAuth from './telegram-auth';
import './App.css';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞
const marketItems = [
  {
    id: 1,
    name: 'Cosmic Warrior',
    tokenId: 'CW001',
    price: 1.5,
    image: 'https://via.placeholder.com/150x150/4A90E2/FFFFFF?text=CW',
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–æ–∏–Ω –∏–∑ –∫–æ—Å–º–æ—Å–∞'
  },
  {
    id: 2,
    name: 'Digital Dragon',
    tokenId: 'DD002',
    price: 2.2,
    image: 'https://via.placeholder.com/150x150/E24A90/FFFFFF?text=DD',
    description: '–¶–∏—Ñ—Ä–æ–≤–æ–π –¥—Ä–∞–∫–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏'
  },
  {
    id: 3,
    name: 'Neon Cat',
    tokenId: 'NC003',
    price: 0.8,
    image: 'https://via.placeholder.com/150x150/90E24A/FFFFFF?text=NC',
    description: '–ù–µ–æ–Ω–æ–≤—ã–π –∫–æ—Ç —Å —è—Ä–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º'
  },
  {
    id: 4,
    name: 'Cyber Wolf',
    tokenId: 'CW004',
    price: 1.8,
    image: 'https://via.placeholder.com/150x150/E2904A/FFFFFF?text=CW',
    description: '–ö–∏–±–µ—Ä-–≤–æ–ª–∫ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏'
  }
];

export default function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userProfile, setUserProfile] = useState(null);
  const [userBalance, setUserBalance] = useState(0);
  const [isProfileLoading, setIsProfileLoading] = useState(true);
  const [telegramUser, setTelegramUser] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentOrder, setCurrentOrder] = useState(null);
  const [paymentStatus, setPaymentStatus] = useState('pending');
  const [selectedItem, setSelectedItem] = useState(marketItems[0]);
  const [activeTab, setActiveTab] = useState('market');
  const [showDevNotice, setShowDevNotice] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [depositAmount, setDepositAmount] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [withdrawAddress, setWithdrawAddress] = useState('');
  const [orders, setOrders] = useState([]);

  // TON Connect
  const [tonConnectUI] = useTonConnectUI();
  const walletInfo = tonConnectUI.account;
  const isConnected = !!walletInfo;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initApp = async () => {
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        const telegramInit = await initTelegram();
        
        if (telegramInit) {
          console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          
          // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await loadUserProfile();
          
          // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
          await loadUserOrders();
        } else {
          console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
          await loadBasicProfile();
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await loadBasicProfile();
      }
    };

    initApp();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  const initTelegram = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
      if (!window.Telegram || !window.Telegram.WebApp) {
        console.warn('‚ùå Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
      const webApp = window.Telegram.WebApp;
      webApp.ready();
      webApp.expand();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = webApp.initDataUnsafe?.user;
      if (!user) {
        console.warn('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return false;
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', user);
      setTelegramUser(user);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegramAuth
      const authSuccess = telegramAuth.init();
      if (!authSuccess) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegramAuth');
        return false;
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error);
      return false;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserProfile = async () => {
    try {
      console.log('üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const profile = await apiClient.getUserProfile();
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', profile);
      
      setUserProfile(profile.user);
      setUserBalance(profile.user.balance || 0);
      setIsProfileLoading(false);
      setMessage('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      
      // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
      if (telegramUser) {
        const tempProfile = {
          telegramId: telegramUser.id,
          username: telegramUser.username || 'user',
          firstName: telegramUser.first_name || 'User',
          lastName: telegramUser.last_name || '',
          balance: 0,
          walletAddress: null,
          isWalletConnected: false
        };
        
        setUserProfile(tempProfile);
        setUserBalance(0);
        setMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const basicProfile = {
          telegramId: 0,
          username: 'user',
          firstName: 'User',
          lastName: '',
          balance: 0,
          walletAddress: null,
          isWalletConnected: false
        };
        
        setUserProfile(basicProfile);
        setUserBalance(0);
        setMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
      }
      
      setIsProfileLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserOrders = async () => {
    try {
      const userOrders = await apiClient.getUserOrders();
      setOrders(userOrders.orders || []);
      console.log('‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userOrders.orders?.length || 0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      setOrders([]);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–±–µ–∑ Telegram)
  const loadBasicProfile = async () => {
    try {
      console.log('üì± –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      const basicProfile = {
        telegramId: 0,
        username: 'user',
        firstName: 'User',
        lastName: '',
        balance: 0,
        walletAddress: null,
        isWalletConnected: false
      };
      
      setUserProfile(basicProfile);
      setUserBalance(0);
      setIsProfileLoading(false);
      setMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
      
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      setIsProfileLoading(false);
      setMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ TON Connect
  useEffect(() => {
    const unsubscribe = tonConnectUI.onStatusChange((wallet) => {
      if (wallet) {
        console.log('üîó TON Connect: –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', wallet.account.address);
        handleWalletConnected(wallet.account.address);
      } else {
        console.log('üîó TON Connect: –∫–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        handleWalletDisconnected();
      }
    });

    return () => unsubscribe();
  }, [tonConnectUI]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const handleWalletConnected = async (walletAddress) => {
    try {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:', walletAddress);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedProfile = {
        ...userProfile,
        walletAddress: walletAddress,
        isWalletConnected: true
      };
      
      setUserProfile(updatedProfile);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        await apiClient.connectWallet(walletAddress);
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ –ë–î:', error);
      }
      
      setMessage('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞');
    }
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const handleWalletDisconnected = async () => {
    try {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedProfile = {
        ...userProfile,
        walletAddress: null,
        isWalletConnected: false
      };
      
      setUserProfile(updatedProfile);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        await apiClient.disconnectWallet();
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ –ë–î:', error);
      }
      
      setMessage('‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞');
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const handleDeposit = async () => {
    if (!depositAmount || parseFloat(depositAmount) <= 0) {
      setMessage('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

    try {
      setIsLoading(true);
      
      const amount = parseFloat(depositAmount);
      const result = await apiClient.deposit(amount);
      
      const newBalance = result.user.balance;
      setUserBalance(newBalance);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      if (userProfile) {
        const updatedProfile = { ...userProfile, balance: newBalance };
        setUserProfile(updatedProfile);
      }
      
      setMessage(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} TON!`);
      setShowDepositModal(false);
      setDepositAmount('');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  const handleWithdraw = async () => {
    if (!withdrawAmount || parseFloat(withdrawAmount) <= 0) {
      setMessage('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

    if (!withdrawAddress || withdrawAddress.trim() === '') {
      setMessage('‚ùå –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
      return;
    }

    const amount = parseFloat(withdrawAmount);
    if (amount > userBalance) {
      setMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      return;
    }

    try {
      setIsLoading(true);
      
      const result = await apiClient.withdraw(amount, withdrawAddress);
      
      const newBalance = result.user.balance;
      setUserBalance(newBalance);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      if (userProfile) {
        const updatedProfile = { ...userProfile, balance: newBalance };
        setUserProfile(updatedProfile);
      }
      
      setMessage(`‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ ${amount} TON –Ω–∞ –∞–¥—Ä–µ—Å ${withdrawAddress}`);
      setShowWithdrawModal(false);
      setWithdrawAmount('');
      setWithdrawAddress('');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–∫—É–ø–∫–∞ NFT
  const buyNFT = async (paymentMethod = 'external_wallet') => {
    try {
      setIsLoading(true);
      
      if (!selectedItem) {
        setMessage('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
      const order = await apiClient.createOrder(
        selectedItem.id,
        selectedItem.name,
        selectedItem.tokenId,
        selectedItem.price,
        paymentMethod
      );

      setCurrentOrder(order);
      setPaymentStatus('pending');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫
      setOrders(prevOrders => [order, ...prevOrders]);
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å, —Å—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º
      if (paymentMethod === 'wallet_balance' && userProfile) {
        if (userBalance >= selectedItem.price) {
          const newBalance = userBalance - selectedItem.price;
          setUserBalance(newBalance);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
          const updatedProfile = { ...userProfile, balance: newBalance };
          setUserProfile(updatedProfile);
          
          setMessage('‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ —Å—á–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞!');
        } else {
          setMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        }
      } else {
        setMessage('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  const checkPayment = async () => {
    if (!currentOrder) {
      setMessage('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
      return;
    }

    try {
      setIsLoading(true);
      
      const orderStatus = await apiClient.checkOrderStatus(currentOrder.comment);
      
      if (orderStatus.status === 'paid') {
        setPaymentStatus('paid');
        setMessage('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! NFT –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã
        setOrders(prevOrders => 
          prevOrders.map(order => 
            order.id === currentOrder.id 
              ? { ...order, status: 'paid' }
              : order
          )
        );
        
        setCurrentOrder(null);
      } else if (orderStatus.status === 'pending') {
        setMessage('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...');
      } else {
        setMessage('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const renderUserInfo = () => {
    if (!userProfile && !telegramUser) return null;

    const user = userProfile || telegramUser;
    if (!user) return null;

    return (
      <div className="user-info">
        <div className="user-profile">
          <div className="user-avatar">
            <span>üë§</span>
          </div>
          <div className="user-details">
            <div className="user-name">
              {user.firstName || user.first_name} {user.lastName || user.last_name}
            </div>
            <div className="user-username">
              @{user.username || 'user'}
            </div>
          </div>
        </div>
        <div className="user-balance">
          <div className="balance-amount">{userBalance.toFixed(2)} TON</div>
          <div className="balance-label">–ë–∞–ª–∞–Ω—Å</div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
  const renderWalletInfo = () => {
    if (!userProfile) return null;

    return (
      <div className="wallet-info">
        <div className="wallet-status">
          <div className="status-indicator">
            <span className={`status-dot ${isConnected ? 'connected' : 'disconnected'}`}></span>
            TON Wallet
          </div>
          {isConnected ? (
            <button 
              className="disconnect-btn"
              onClick={() => tonConnectUI.disconnect()}
            >
              –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </button>
          ) : (
            <button 
              className="connect-btn"
              onClick={() => tonConnectUI.connectWallet()}
            >
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </button>
          )}
        </div>
        {walletInfo?.address && (
          <div className="wallet-address">
            {walletInfo.address.slice(0, 8)}...{walletInfo.address.slice(-8)}
          </div>
        )}
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ç–∞
  const renderMarket = () => {
    return (
      <div className="market-section">
        <h2>Market</h2>
        <div className="market-items">
          {marketItems.map((item) => (
            <div 
              key={item.id} 
              className={`market-item ${selectedItem?.id === item.id ? 'selected' : ''}`}
              onClick={() => setSelectedItem(item)}
            >
              <div className="item-image">
                <img src={item.image} alt={item.name} />
              </div>
              <div className="item-info">
                <div className="item-name">{item.name}</div>
                <div className="item-price">{item.price} TON</div>
              </div>
            </div>
          ))}
        </div>
        
        {selectedItem && (
          <div className="selected-item">
            <h3>{selectedItem.name}</h3>
            <p>{selectedItem.description}</p>
            <div className="item-actions">
              <button 
                className="buy-btn"
                onClick={() => buyNFT('external_wallet')}
                disabled={isLoading}
              >
                –ö—É–ø–∏—Ç—å –∑–∞ {selectedItem.price} TON
              </button>
              {userBalance >= selectedItem.price && (
                <button 
                  className="buy-balance-btn"
                  onClick={() => buyNFT('wallet_balance')}
                  disabled={isLoading}
                >
                  –ö—É–ø–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å
                </button>
              )}
            </div>
          </div>
        )}
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –∑–∞–∫–∞–∑–æ–≤
  const renderOrders = () => {
    return (
      <div className="orders-section">
        <h2>Orders</h2>
        {orders.length === 0 ? (
          <div className="no-orders">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</div>
        ) : (
          <div className="orders-list">
            {orders.map((order) => (
              <div key={order.id} className="order-item">
                <div className="order-info">
                  <div className="order-name">{order.itemName}</div>
                  <div className="order-price">{order.amount} TON</div>
                  <div className={`order-status ${order.status}`}>
                    {order.status === 'paid' ? '–û–ø–ª–∞—á–µ–Ω' : '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
  const renderProfile = () => {
    return (
      <div className="profile-section">
        <h2>Profile</h2>
        {renderUserInfo()}
        {renderWalletInfo()}
        
        <div className="profile-actions">
          <button 
            className="deposit-btn"
            onClick={() => setShowDepositModal(true)}
          >
            –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
          </button>
          <button 
            className="withdraw-btn"
            onClick={() => setShowWithdrawModal(true)}
          >
            –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
          </button>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderContent = () => {
    switch (activeTab) {
      case 'market':
        return renderMarket();
      case 'orders':
        return renderOrders();
      case 'profile':
        return renderProfile();
      default:
        return renderMarket();
    }
  };

  // –†–µ–Ω–¥–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const renderNavigation = () => {
    const tabs = [
      { id: 'market', label: 'Market', icon: 'üõí' },
      { id: 'orders', label: 'Orders', icon: 'üìã' },
      { id: 'profile', label: 'Profile', icon: 'üë§' }
    ];

    return (
      <div className="navigation">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`nav-tab ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="nav-icon">{tab.icon}</span>
            <span className="nav-label">{tab.label}</span>
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="App">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="header">
        <div className="header-content">
          <div className="app-title">
            <h1>TON Market</h1>
            <span className="app-subtitle">–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</span>
          </div>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ */}
      {showDevNotice && (
        <div className="dev-notice">
          <span>‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</span>
          <button onClick={() => setShowDevNotice(false)}>‚úï</button>
        </div>
      )}

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
      {isProfileLoading && (
        <div className="loading">
          <div className="loading-spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</span>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="main-content">
        {renderContent()}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      {renderNavigation()}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è */}
      {showDepositModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</h3>
            <input
              type="number"
              placeholder="–°—É–º–º–∞ –≤ TON"
              value={depositAmount}
              onChange={(e) => setDepositAmount(e.target.value)}
            />
            <div className="modal-actions">
              <button onClick={handleDeposit} disabled={isLoading}>
                {isLoading ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...' : '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'}
              </button>
              <button onClick={() => setShowDepositModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–≤–æ–¥–∞ */}
      {showWithdrawModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞</h3>
            <input
              type="number"
              placeholder="–°—É–º–º–∞ –≤ TON"
              value={withdrawAmount}
              onChange={(e) => setWithdrawAmount(e.target.value)}
            />
            <input
              type="text"
              placeholder="–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"
              value={withdrawAddress}
              onChange={(e) => setWithdrawAddress(e.target.value)}
            />
            <div className="modal-actions">
              <button onClick={handleWithdraw} disabled={isLoading}>
                {isLoading ? '–í—ã–≤–æ–¥...' : '–í—ã–≤–µ—Å—Ç–∏'}
              </button>
              <button onClick={() => setShowWithdrawModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ */}
      {currentOrder && paymentStatus === 'pending' && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞</h3>
            <p>–ó–∞–∫–∞–∑: {currentOrder.itemName}</p>
            <p>–°—É–º–º–∞: {currentOrder.amount} TON</p>
            <div className="modal-actions">
              <button onClick={checkPayment} disabled={isLoading}>
                {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'}
              </button>
              <button onClick={() => setCurrentOrder(null)}>
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 