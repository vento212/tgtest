import React, { useState, useEffect } from 'react';
import { useTonConnectUI } from '@tonconnect/ui-react';
import './App.css';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞
const marketItems = [
  {
    id: 1,
    name: 'Cosmic Warrior',
    price: 1.5,
    image: 'https://via.placeholder.com/150x150/4A90E2/FFFFFF?text=CW',
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–æ–∏–Ω –∏–∑ –∫–æ—Å–º–æ—Å–∞'
  },
  {
    id: 2,
    name: 'Digital Dragon',
    price: 2.2,
    image: 'https://via.placeholder.com/150x150/E24A90/FFFFFF?text=DD',
    description: '–¶–∏—Ñ—Ä–æ–≤–æ–π –¥—Ä–∞–∫–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏'
  },
  {
    id: 3,
    name: 'Neon Cat',
    price: 0.8,
    image: 'https://via.placeholder.com/150x150/90E24A/FFFFFF?text=NC',
    description: '–ù–µ–æ–Ω–æ–≤—ã–π –∫–æ—Ç —Å —è—Ä–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º'
  },
  {
    id: 4,
    name: 'Cyber Wolf',
    price: 1.8,
    image: 'https://via.placeholder.com/150x150/E2904A/FFFFFF?text=CW',
    description: '–ö–∏–±–µ—Ä-–≤–æ–ª–∫ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏'
  }
];

export default function App() {
  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [userName, setUserName] = useState('User');
  const [userBalance, setUserBalance] = useState(0);
  const [selectedItem, setSelectedItem] = useState(marketItems[0]);
  const [activeTab, setActiveTab] = useState('market');
  const [message, setMessage] = useState('');
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [depositAmount, setDepositAmount] = useState('');
  const [purchasedItems, setPurchasedItems] = useState([]);
  const [showDevNotice, setShowDevNotice] = useState(true);

  // TON Connect
  const [tonConnectUI] = useTonConnectUI();
  const walletInfo = tonConnectUI.account;
  const isConnected = !!walletInfo;

  // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const user = window.Telegram.WebApp.initDataUnsafe.user;
      const name = user.first_name || user.first_name || 'User';
      setUserName(name);
      console.log('‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', name);
    } else {
      console.log('‚ö†Ô∏è Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è');
    }
    
    setMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ TON Connect
  useEffect(() => {
    const unsubscribe = tonConnectUI.onStatusChange((wallet) => {
      if (wallet) {
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', wallet.account.address);
        setMessage('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      } else {
        console.log('‚ùå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        setMessage('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    });

    return () => unsubscribe();
  }, [tonConnectUI]);

  // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const handleDeposit = () => {
    if (!depositAmount || parseFloat(depositAmount) <= 0) {
      setMessage('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

    const amount = parseFloat(depositAmount);
    setUserBalance(prev => prev + amount);
    setMessage(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} TON!`);
    setShowDepositModal(false);
    setDepositAmount('');
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞
  const buyNFT = () => {
    if (!isConnected) {
      setMessage('‚ùå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
      return;
    }

    if (userBalance < selectedItem.price) {
      setMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      return;
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    setUserBalance(prev => prev - selectedItem.price);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
    const purchasedItem = {
      ...selectedItem,
      id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      purchaseDate: new Date().toLocaleDateString(),
      purchaseTime: new Date().toLocaleTimeString()
    };
    
    setPurchasedItems(prev => [purchasedItem, ...prev]);
    setMessage(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞! ${selectedItem.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.`);
  };

  // –†–µ–Ω–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const renderUser = () => (
    <div className="user-info">
      <div className="user-profile">
        <div className="user-avatar">
          <span>üë§</span>
        </div>
        <div className="user-details">
          <div className="user-name">{userName}</div>
          <div className="user-username">@user</div>
        </div>
      </div>
      <div className="user-balance">
        <div className="balance-amount">{userBalance.toFixed(2)} TON</div>
        <div className="balance-label">–ë–∞–ª–∞–Ω—Å</div>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–∞
  const renderWallet = () => (
    <div className="wallet-info">
      <div className="wallet-status">
        <div className="status-indicator">
          <span className={`status-dot ${isConnected ? 'connected' : 'disconnected'}`}></span>
          TON Wallet
        </div>
        {isConnected ? (
          <button 
            className="disconnect-btn"
            onClick={() => tonConnectUI.disconnect()}
          >
            –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
          </button>
        ) : (
          <button 
            className="connect-btn"
            onClick={() => tonConnectUI.connectWallet()}
          >
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
          </button>
        )}
      </div>
      {walletInfo?.address && (
        <div className="wallet-address">
          {walletInfo.address.slice(0, 6)}...{walletInfo.address.slice(-4)}
        </div>
      )}
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ç–∞
  const renderMarket = () => (
    <div className="market-section">
      <h2>Market</h2>
      <div className="market-items">
        {marketItems.map((item) => (
          <div 
            key={item.id} 
            className={`market-item ${selectedItem?.id === item.id ? 'selected' : ''}`}
            onClick={() => setSelectedItem(item)}
          >
            <div className="item-image">
              <img src={item.image} alt={item.name} />
            </div>
            <div className="item-info">
              <div className="item-name">{item.name}</div>
              <div className="item-price">{item.price} TON</div>
            </div>
          </div>
        ))}
      </div>
      
      {selectedItem && (
        <div className="selected-item">
          <h3>{selectedItem.name}</h3>
          <p>{selectedItem.description}</p>
          <div className="item-actions">
            <button 
              className="buy-btn"
              onClick={buyNFT}
            >
              –ö—É–ø–∏—Ç—å –∑–∞ {selectedItem.price} TON
            </button>
          </div>
        </div>
      )}
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const renderPurchased = () => (
    <div className="purchased-section">
      <h2>–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h2>
      {purchasedItems.length === 0 ? (
        <div className="no-items">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
          <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Market, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å NFT</p>
        </div>
      ) : (
        <div className="purchased-items">
          {purchasedItems.map((item) => (
            <div key={item.id} className="purchased-item">
              <div className="item-image">
                <img src={item.image} alt={item.name} />
              </div>
              <div className="item-info">
                <div className="item-name">{item.name}</div>
                <div className="item-price">{item.price} TON</div>
                <div className="purchase-date">
                  –ö—É–ø–ª–µ–Ω: {item.purchaseDate} –≤ {item.purchaseTime}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
  const renderProfile = () => (
    <div className="profile-section">
      <h2>Profile</h2>
      {renderUser()}
      {renderWallet()}
      
      <div className="profile-actions">
        <button 
          className="deposit-btn"
          onClick={() => setShowDepositModal(true)}
        >
          –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
        </button>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderContent = () => {
    switch (activeTab) {
      case 'market':
        return renderMarket();
      case 'purchased':
        return renderPurchased();
      case 'profile':
        return renderProfile();
      default:
        return renderMarket();
    }
  };

  // –†–µ–Ω–¥–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const renderNavigation = () => (
    <div className="navigation">
      <button
        className={`nav-tab ${activeTab === 'market' ? 'active' : ''}`}
        onClick={() => setActiveTab('market')}
      >
        <span className="nav-icon">üõí</span>
        <span className="nav-label">Market</span>
      </button>
      <button
        className={`nav-tab ${activeTab === 'purchased' ? 'active' : ''}`}
        onClick={() => setActiveTab('purchased')}
      >
        <span className="nav-icon">üì¶</span>
        <span className="nav-label">–ö—É–ø–ª–µ–Ω–Ω—ã–µ</span>
      </button>
      <button
        className={`nav-tab ${activeTab === 'profile' ? 'active' : ''}`}
        onClick={() => setActiveTab('profile')}
      >
        <span className="nav-icon">üë§</span>
        <span className="nav-label">Profile</span>
      </button>
    </div>
  );

  return (
    <div className="App">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="header">
        <div className="header-content">
          <div className="app-title">
            <h1>TON Market</h1>
            <span className="app-subtitle">–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</span>
          </div>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ */}
      {showDevNotice && (
        <div className="dev-notice">
          <span>‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</span>
          <button onClick={() => setShowDevNotice(false)}>‚úï</button>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="main-content">
        {renderContent()}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      {renderNavigation()}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è */}
      {showDepositModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</h3>
            <input
              type="number"
              placeholder="–°—É–º–º–∞ –≤ TON"
              value={depositAmount}
              onChange={(e) => setDepositAmount(e.target.value)}
            />
            <div className="modal-actions">
              <button onClick={handleDeposit}>
                –ü–æ–ø–æ–ª–Ω–∏—Ç—å
              </button>
              <button onClick={() => setShowDepositModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 